#include <algorithm>
#include <iomanip>
#include <iostream>
#include <vector>

static constexpr int64_t INF = std::numeric_limits<long long>::max() / 3;
int64_t n, m, k;

struct edge {
    int64_t l, r, cost;
};

class Graph {
 private:
    struct edge_s {
        int64_t cost, flow, l, r, pot;
    };
    std::vector<edge_s> all_edge;
    std::vector<std::vector<int64_t>> List;
    std::vector<int64_t> dist;
    std::vector<int64_t> parent;
    std::vector<int64_t> pot;
    std::vector<bool> used_vertex, used_edge;
    int64_t n, m;

 public:
    Graph(std::vector<edge> edge_list, int64_t ver_num) {
        n = ver_num;
        m = edge_list.size();
        all_edge.resize(4 * m);
        dist.resize(n + 1);
        parent.resize(n + 1);
        all_edge.resize(4 * m);
        List.resize(n + 1);
        used_edge.resize(4 * m);
        for (int i = 0; i < m; i++) {
            edge_s p;
            p.l = edge_list[i].l;
            p.r = edge_list[i].r;
            p.cost = edge_list[i].cost;
            p.flow = 0;
            all_edge[i] = p;
            List[p.l].push_back(i);
            List[p.l].push_back(i + 3 * m);
            List[p.r].push_back(i + m);
            List[p.r].push_back(i + 2 * m);
            std::swap(p.r, p.l);
            all_edge[i + m] = p;
            all_edge[i + 2 * m] = all_edge[i + m];
            all_edge[i + 3 * m] = all_edge[i];
            used_edge[i + 2 * m] = true;
            used_edge[i + 3 * m] = true;
        }
    }
    void calc_dist() {
        dist[1] = 0;
        for (int i = 2; i <= n; i++) {
            dist[i] = INF;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 2 * m; j++) {
                if (dist[all_edge[j].r] > dist[all_edge[j].l] + all_edge[j].cost) {
                    dist[all_edge[j].r] = dist[all_edge[j].l] + all_edge[j].cost;
                    parent[all_edge[j].r] = j;
                }
            }
        }
        for (int i = 0; i < 2 * m; i++) {
            all_edge[i].pot = all_edge[i].cost + dist[all_edge[i].l] - dist[all_edge[i].r];
        }
    }
    void dijkstra() {
        int64_t min_dist = INF, num = -1;
        for (int i = 1; i <= n; i++) {
            if ((!used_vertex[i]) && (pot[i] < min_dist)) {
                min_dist = pot[i];
                num = i;
            }
        }
        if (num == -1) {
            return;
        }
        used_vertex[num] = true;
        for (size_t j = 0; j < List[num].size(); j++) {
            if ((all_edge[List[num][j]].flow < 1) && (!used_edge[List[num][j]])) {
                if (pot[all_edge[List[num][j]].r] > pot[num] + all_edge[List[num][j]].pot) {
                    pot[all_edge[List[num][j]].r] = pot[num] + all_edge[List[num][j]].pot;
                    parent[all_edge[List[num][j]].r] = List[num][j];
                }
            }
        }
        dijkstra();
    }
    bool find_flow() {
        int64_t posnow = n;
        if (dist[n] == INF) {
            return false;
        }
        while (posnow != 1) {
            all_edge[parent[posnow]].flow++;
            if (all_edge[parent[posnow]].flow == 0) {
                used_edge[parent[posnow]] = true;
            }
            all_edge[(parent[posnow] + 2 * m) % (4 * m)].flow--;
            used_edge[(parent[posnow] + 2 * m) % (4 * m)] = false;
            all_edge[(parent[posnow] + 2 * m) % (4 * m)].pot = 0;
            posnow = all_edge[parent[posnow]].l;
        }
        used_vertex.resize(0);
        used_vertex.resize(n + 1);
        pot.resize(n + 1);
        for (int i = 1; i <= n; i++) {
            pot[i] = INF;
            parent[i] = -1;
        }
        pot[1] = 0;
        dijkstra();
        for (int i = 1; i <= n; i++) {
            dist[i] = pot[i];
        }
        for (int i = 0; i < 4 * m; i++) {
            all_edge[i].pot = dist[all_edge[i].l] + all_edge[i].pot - dist[all_edge[i].r];
        }
        return true;
    }
    void cout_flow(int64_t k) {
        std::vector<std::vector<int64_t>> answer;
        answer.resize(n + 1);
        double total_cost = 0.00;
        for (int i = 0; i < 2 * m; i++) {
            if (all_edge[i].flow > 0) {
                answer[all_edge[i].l].push_back(i);
                total_cost += all_edge[i].cost;
            }
        }
        std::cout << std::setprecision(10) << total_cost / k << "\n";
        for (int i = 0; i < k; i++) {
            std::vector<int64_t> out_p;
            int64_t pos_now = 1;
            while (pos_now != n) {
                out_p.push_back(answer[pos_now][answer[pos_now].size() - 1]);
                answer[pos_now].pop_back();
                pos_now = all_edge[out_p[out_p.size() - 1]].r;
            }
            std::cout << out_p.size() << " ";
            for (size_t j = 0; j < out_p.size(); j++) {
                std::cout << out_p[j] % m + 1 << " ";
            }
            std::cout << "\n";
        }
    }
};

int main() {
    std::cin >> n >> m >> k;
    std::vector<edge> edge_list;
    edge_list.resize(m);
    for (int i = 0; i < m; i++) {
        std::cin >> edge_list[i].l >> edge_list[i].r >> edge_list[i].cost;
    }
    Graph g(edge_list, n);
    g.calc_dist();
    for (int p = 0; p < k; p++) {
        if (!g.find_flow()) {
            std::cout << "-1";
            return 0;
        }
    }
    g.cout_flow(k);
}
